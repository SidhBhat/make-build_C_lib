#!/usr/bin/make -f
# Set environment variables
#===================================================

SHELL = /bin/sh

#===================================================
# Compile commands
#===================================================S
CC       = gcc
CLIBS    =
-include libs.mk
CFLAGS   = -g -O -Wall
AR       = ar
ARFLAGS  = crs
#===================================================
# Build Directories
#===================================================
srcdir     =
# srcdir has no effect!
buildir    = build
libdirname = libs
libtardir  = $(buildir)/$(libdirname)
#===================================================
# Install directories
#===================================================
prefix      = /usr/local
exec_prefix = $(prefix)
bindir      = $(exec_prefix)/bin
datarootdir = $(prefix)/share
datadir     = $(datarootdir)
libdir      = $(prefix)/lib
DESTDIR     =
#===================================================
prog_name = main.out
#===================================================
INSTALL         = install -D -p
INSTALL_PROGRAM = $(INSTALL) -m 755
INSTALL_DATA     = $(INSTALL) -m 644
#===================================================
# Source and target objects
#===================================================
DIRS    = $(sort $(dir $(SRCS)))
SRCS    = $(filter-out $(subst $(buildir)/,,$(libtardir))/%.c,$(wildcard */*.c))
OBJS    = $(patsubst %.c,%.o,$(addprefix $(buildir)/,$(SRCS)))
MKS     = $(patsubst %.c,%.mk,$(addprefix $(buildir)/,$(SRCS)))
LIBS    = $(addprefix $(libtardir)/,$(addsuffix .a,$(addprefix lib,$(subst /,,$(DIRS)))))
LIBDEPMK = $(addsuffix libs.mk,$(DIRS))
-include $(LIBDEPMK)
#=====================================================

build: $(OBJS)
.PHONY: build

test: $(prog_name)
.PHONY: test

install: build
	@for file in $(addsuffix .a,$(addprefix $(DESTDIR)$(libdir)/lib,$(subst /,,$(DIRS)))); do \
		[ -f "$$file" ] && { \
			echo -e "\e[35mWarning\e[0m: File already exists at \"$$file\"..."; \
			echo "Defualt behavoir is not to overwrite"; \
		} || { \
			echo "Installing \"$$file\"..."; \
			$(INSTALL_DATA) $(libtardir)/$${file$(hash)$(hash)*/} -t $(DESTDIR)$(libdir); \
			ranlib "$$file"; \
		}; \
	done
.PHONY: install

debug:
	@echo -e "\e[35mDirectories \e[0m    : $(DIRS)"
	@echo -e "\e[35mSource Files\e[0m    : $(SRCS)"
	@echo -e "\e[35mMake Files\e[0m      : $(MKS)"
	@echo -e "\e[35mObject Files\e[0m    : $(OBJS)"
	@echo -e "\e[35mLibrary Files\e[0m   : $(LIBS)"
	@echo -e "\e[35mDependancy files\e[0m: $(LIBDEPMK)"
	@echo -e "\e[35mCLIBS = \e[0m: $(if $(CLIBS), $(CLIBS) $(sort $(CLIBS_DEP)), -L./$(libtardir) $(addprefix -l,$(subst /,,$(DIRS))) $(sort $(CLIBS_DEP)))"
.PHONY: debug

#=================================Build Instructions================================

$(MKS): $(buildir)/%.mk : %.c makegen.sh
	@mkdir -p "$(@D)" "$(libtardir)"
	@echo -e "$(hash)!/usr/bin/make -f" > $@
	@./makegen.sh "$<" "$(CC) $(CFLAGS) -c \$$< -o \$$@\n\t$(AR) $(ARFLAGS) $(libtardir)/lib$(subst /,,$(dir $*)).a \$$@ $(if $(CLIBS_$(subst /,,$(dir $*))),-l\"$(CLIBS_$(subst /,,$(dir $*)))\",)" >> $@
	@sed -i '2s/^/$(subst /,\/,$(@D)/)/' $@
	@echo "Creating make file... \"$@\""

$(OBJS): %.o : %.mk
	@mkdir -p "$(@D)"
	@$(MAKE) -C "$(CURDIR)" -f $< $(MAKEFLAGS)

$(prog_name): main.c $(OBJS)
	$(CC) $(CFLAGS) $< $(if $(CLIBS), $(CLIBS) $(sort $(CLIBS_DEP)), -L./$(libtardir) $(addprefix -l,$(subst /,,$(DIRS))) $(sort $(CLIBS_DEP))) -o $@

#===================================================================================

uninstall:
	rm -f $(addsuffix .a,$(addprefix $(DESTDIR)$(libdir)/lib,$(subst /,,$(DIRS))))
.PHONY: uninstall

clean:
	rm -rf ./build
	rm -f ./"$(prog_name)"
	@rm -f ./main.out
.PHONY: clean

clean-all: clean
	rm -f ./makegen.sh
.PHONY: clean-all

deep-clean: clean-all remove-link-file remove-dependancylib-files
.PHONY: deep-clean

help:
	@echo "The follwing targets may be given..."
	@echo -e "\t...install"
	@echo -e "\t...build"
	@echo -e "\t...test"
	@echo -e "\t...uninstall"
	@echo -e "\t...clean"
	@echo -e "\t...clean-all"
	@echo -e "\t...deep-clean"
	@echo "Other options"
	@echo -e "\t...debug"
	@echo -e "\t...help"
	@echo -e "\t...remove-link-file"
	@echo -e "\t...generate-link-file"
	@echo -e "\t...remove-dependancylib-files"
	@echo -e "\t...generate-dependancylib-files"
.PHONY: help

hash = \#
makegen.sh:
	@echo -e "$(hash)!/bin/bash"\
	"\n$(hash) Generated by makefile, DO NOT EDIT!"\
	"\n[ -f \"\$$1\" ] && {"\
	"\n\tgcc -M \"\$$1\""\
	"\n\techo -e \"\\\\t\$$2\""\
	"\n\texit 0"\
	"\n} || {"\
	"\n\texit 1"\
	"\n}" >> makegen.sh
	@chmod u+x,g+x makegen.sh
	@echo "srcipt: makegen.sh generated."

generate-link-file:
	@[ -f "./main.c" ] && { \
		echo "$(hash)!/usr/bin/make -f" > ./libs.mk; \
		echo "$(hash) Make config file for linker options, do not rename." >> ./libs.mk; \
		echo "$(hash) The value of the variable must be CLIBS for it to be read by the makefile." >> ./libs.mk; \
		echo "CLIBS = -L./$(libtardir) $(addprefix -l,$(subst /,,$(DIRS))) $(sort $(CLIBS_DEP))" >> ./libs.mk; \
	};
.PHONY: generate-link-file

generate-dependancylib-files:
	@for dir in $(DIRS); do \
		[ -d "$$dir" ] && { \
			dir=$${dir//\//}; \
			echo "$(hash)!/usr/bin/make -f" > "./$$dir/libs.mk"; \
			echo "$(hash) Make config file for linker options, do not rename." >> "./$$dir/libs.mk"; \
			echo "$(hash) The value of the variable must be CLIBS_<libname>, where the libname is the stem of lib*.a, for it to be read by the makefile." >> "$$dir/libs.mk"; \
			echo "CLIBS_$$dir =" >> "$$dir/libs.mk"; \
			echo -e "CLIBS_DEP += \$$(filter-out \$$(CLIBS),\$$(CLIBS_$$dir))\n" >> "$$dir/libs.mk"; \
		}; \
	done
.PHONY: generate-dependancylib-files

remove-link-file:
	rm -f ./libs.mk
.PHONY: remove-link-file

remove-dependancylib-files:
	rm -f $(LIBDEPMK)
.PHONY: remove-dependancylib-files
