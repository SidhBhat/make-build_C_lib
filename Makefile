#!/usr/bin/make -f
# Set environment variables
#===================================================

SHELL = /bin/bash

#===================================================
# Compile commands
#===================================================
CC       = gcc
CLIBS    =
-include libs.mk
CFLAGS = -g -O -Wall
CFLAGS_shared = --shared
#===================================================
# Build Directories
#===================================================
srcdir     = src
#srcdir is ignored!
buildir    = build
#===================================================
# Install directories
#===================================================
prefix      = /usr/local
exec_prefix = $(prefix)
bindir      = $(exec_prefix)/bin
datarootdir = $(prefix)/share
datadir     = $(datarootdir)
libdir      = $(prefix)/lib
DESTDIR     =
#===================================================
INSTALL         = install -D -p
INSTALL_PROGRAM = $(INSTALL) -m 755
INSTALL_DATA     = $(INSTALL) -m 644
#===================================================
prog_name = main.out
#===================================================
# Source and target objects
#===================================================
DIRS = $(sort $(dir $(SRCS)))
DEPS = $(addsuffix deps.mk,$(DIRS))
SRCS = $(wildcard */*.c)
OBJS = $(addsuffix .so,$(addprefix $(buildir)/lib,$(subst /,,$(DIRS))))
MKS  = $(addsuffix .mk,$(addprefix $(buildir)/,$(subst /,,$(DIRS))))
include $(DEPS)
#===================================================

build: $(OBJS)
.PHONY: build

install: $(prog_name)
	@for file in $(notdir $(OBJS)); do \
		[ -f $(DESTDIR)$(libdir)/$$file ] && { \
			echo -e "\e[35mWarning\e[0m: File already exists at \"$(DESTDIR)$(libdir)/$$file\"..."; \
			echo "Defualt behavoir is not to overwrite"; \
		} || { \
			echo "Installing \"$(DESTDIR)$(libdir)/$$file\"..."; \
			$(INSTALL_DATA) $(buildir)/$$file -t $(DESTDIR)$(libdir); \
			echo "Installing Complete..."; \
		}; \
	done

.PHONY: uninstall

test: $(prog_name)
.PHONY: test

debug:
	@echo -e "\e[35msource Directories\e[0m = $(DIRS)"
	@echo -e "\e[35mSource Files\e[0m       = $(SRCS)"
	@echo -e "\e[35mDependancy Files\e[0m   = $(DEPS)"
	@echo -e "\e[35mMAKE Files\e[0m         = $(MKS)"
	@echo -e "\e[35mLibrary Files\e[0m      = $(OBJS)"
.PHONY: debug

#===================================================

$(MKS): $(buildir)/%.mk: % Makegen.sh
	@mkdir -p $(@D)/$*
	@touch $*/*.c
	@./Makegen.sh "$*" "$(CC) $(CFLAGS) $(CFLAGS_shared) \$$^ $(CLIBS_$*) -o \$$@" "$(buildir)" "$(CC) $(CFLAGS) -fpic -c \$$< -o \$$@" > $@
	@echo "Generating make file: $@..."

$(OBJS): $(buildir)/lib%.so: $(buildir)/%.mk
	$(MAKE) -C "$(CURDIR)" -f $< $(MAKEFLAGS)

$(prog_name): main.c $(OBJS)
ifeq ($(filter install,$(MAKECMDGOALS)), install)
	$(CC) $(CFLAGS) -Wl,-rpath="$(DESTDIR)$(libdir)" $< $(if $(CLIBS), $(CLIBS), -L./$(buildir) $(addprefix -l,$(subst /,,$(DIRS)))) -o $@
else
	$(CC) $(CFLAGS) -Wl,-rpath="$(buildir)" $< $(if $(CLIBS), $(CLIBS), -L./$(buildir) $(addprefix -l,$(subst /,,$(DIRS)))) -o $@
endif

#===================================================

uninstall:
	rm -f $(addprefix $(DESTDIR)$(libdir)/,$(notdir $(OBJS)))
	rm -f $(prog_name)
.PHONY: uninstall

help:
	@echo "The follwing targets may be given..."
	@echo -e "\t...install"
	@echo -e "\t...build"
	@echo -e "\t...test"
	@echo -e "\t...uninstall"
	@echo -e "\t...clean"
	@echo -e "\t...clean-all"
	@echo -e "\t...deep-clean"
	@echo "Other options"
	@echo -e "\t...debug"
	@echo -e "\t...help"
	@echo -e "\t...remove-link-file"
	@echo -e "\t...generate-link-file"
	@echo -e "\t...remove-config"
.PHONY: help

clean:
	rm -rf $(buildir)
	rm -f ./$(prog_name)
	@rm -f ./main.out
.PHONY: clean

clean-all: clean
	rm -f ./Makegen.sh
.PHONY: clean-all

deep-clean: clean-all remove-link-file remove-configs
.PHONY : deep-clean

hash = \#
$(DEPS): %/deps.mk : %
	@[ -f "$@" ] || { \
		echo -e "$(hash)!/usr/bin/make -f"\
		"\n$(hash) Make config file for linker options, do not rename."\
		"\n$(hash) The value of the variable must be CLIBS_<libname>, where the libname is the stem of lib*.a, for it to be read by the makefile."\
		"\nCLIBS_$(subst /,,$(@D)) ="\
		"\nCLIBS_DEP += \$$(filter-out \$$(CLIBS),\$$(CLIBS_$(subst /,,$(@D))))"\
		"\nSRCS_$(subst /,,$(@D)) = $(wildcard $(@D)/*.c)" > $@; \
		echo "Generating config file : $@..."; \
	} && { \
		sed -i "s/SRCS_$(subst /,,$(@D)) =.*/SRCS_$(subst /,,$(@D)) = $(subst /,\/,$(wildcard $(@D)/*.c))/g" $@; \
		echo "Updating config file : $@..."; \
	};

Makegen.sh:
	@echo -e "\n$(hash)!/bin/bash"\
	"\n$(hash) Generated by makefile, DO NOT EDIT!"\
	"\n[ -z \"\$$1\" ] || [ -z \"\$$2\" ] || [ -z \"\$$3\" ] || [ -z \"\$$4\" ] && {"\
	"\n\texit 1"\
	"\n}"\
	"\n[ -d \"\$$1\" ] && {"\
	"\n\tsrc=\$$(echo \"\$$1\"/*.c)"\
	"\n\tsrc=\$$(echo \"\$$src\" | tr -s '/')"\
	"\n\tprintf -v obj \"\$$3/%s \" \$${src//.c/.o}"\
	"\n\tobj=\$$(echo \"\$$obj\" | tr -s '/')"\
	"\n\techo \"\$$(echo \"\$$3/\" | tr -s '/' )lib\$${1//\//}.so : \$$obj\""\
	"\n\techo -e \"\\\\t\$$2\n\""\
	"\n} || {"\
	"\n\texit 2"\
	"\n}"\
	"\nprintf -v objprefix \"%s\" \$$(echo \"\$$3/\$$1/\" | tr -s '/')"\
	"\nfor file in \$$src; do"\
	"\n\tprintf \"%s\" \"\$$objprefix\""\
	"\n\t[ -f \"\$$file\" ] && gcc -M \"\$$file\" || exit 4"\
	"\n\techo -e \"\\\\t\$$4\n\""\
	"\ndone"\
	"\nexit 0"\ > Makegen.sh
	@chmod u+x,g+x Makegen.sh
	@echo "Generating Script: Makegen.sh..."

generate-link-file:
	@[ -f "./main.c" ] && { \
		echo -e "$(hash)!/usr/bin/make -f"\
		"\n$(hash) Make config file for linker options, do not rename."\
		"\n$(hash) The value of the variable must be CLIBS for it to be read by the makefile."\
		"\nCLIBS = -L./$(buildir) $(addprefix -l,$(subst /,,$(DIRS)))" > ./libs.mk; \
	};
	@echo "Generating make file: libs.mk..."
.PHONY: generate-link-file

remove-configs:
	rm -f $(DEPS)
.PHONY: remove-configs

remove-link-file:
	rm -f ./libs.mk
.PHONY: remove-link-file
